{"version":3,"sources":["TrackRow.js","SongRow.js","App.js","serviceWorker.js","index.js"],"names":["TrackRow","react_default","a","createElement","key","this","props","track","idTrack","style","width","padding","color","background","strTrack","React","Component","SongRow","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","rowsii","_this2","console","log","song","strAlbum","urlString","idAlbum","$","ajax","url","success","searchResults","results","trackRows","forEach","trackRow","src_TrackRow","push","setState","error","xhr","status","err","id","maxWidth","margin","display","src","strAlbumThumb","alt","marginRight","intYearReleased","type","onClick","viewSong","bind","value","App","rows","handleChange","assertThisInitialized","handleSubmit","performSearch","searchTerm","album","songRows","songRow","src_SongRow","event","target","preventDefault","className","onSubmit","onChange","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a90e7cae.chunk.js","sourcesContent":["import React from 'react';\n\nclass TrackRow extends React.Component{\n    render() {\n        return <p key={this.props.track.idTrack} style={{width: '100%',padding: '5px', color: '#fff', background: '#000'}}>\n        {this.props.track.strTrack} | \n        </p>\n          \n    }\n}\n\nexport default TrackRow;","import React from 'react';\nimport TrackRow from './TrackRow.js';\nimport $ from 'jquery';\n\nclass SongRow extends React.Component{\n  constructor(props) {\n    super(props)\n    this.state = {rowsii: ''};\n    \n  }\n\n  viewSong(){\n    \n    console.log(this.props.song.strAlbum)\n    const urlString = \"https://theaudiodb.com/api/v1/json/1/track.php?m=\" + this.props.song.idAlbum\n  \n    $.ajax({\n      url: urlString,\n      success: (searchResults) => {\n        // console.log(searchResults)\n        const results = searchResults.track\n        var trackRows = []\n        results.forEach((track) => {\n          // console.log(track.strTrack)\n          const trackRow = <TrackRow key={track.idTrack} track ={track}/>\n          trackRows.push(trackRow)\n        })\n        \n        this.setState({rowsii: trackRows})\n\n      },\n      error: (xhr, status, err) => {\n        console.log(\"i failed\")\n      }\n    })\n    \n  }\n\n\n    render() {\n        return <table key={this.props.song.id} style={{maxWidth: '800px', margin: '0px auto', display: 'block', }}>\n          <tbody>\n            <tr>\n              <td>\n             <img src={this.props.song.strAlbumThumb} alt=\"cover\" style={{maxWidth:'100px', marginRight: '20px'}} />\n              </td>\n              <td>\n                <p><strong>{this.props.song.strAlbum}</strong></p>\n                <p>{this.props.song.intYearReleased}</p>\n                <input type=\"button\" onClick={this.viewSong.bind(this)} value=\"View Me\" />\n                {this.state.rowsii}\n              </td>\n            </tr>\n          </tbody>\n        </table>\n    }\n}\n\nexport default SongRow;\n","import React, { Component} from 'react';\nimport './App.css';\nimport SongRow from './SongRow.js';\nimport $ from 'jquery';\n\nclass App extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {rowsii: ''};\n    this.state = {rows: ''};\n    \n    this.state = {value: ''};\n    \n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n\n    this.performSearch(\"bassnectar\");\n  }\n\n  performSearch(searchTerm){\n    const urlString = \"https://www.theaudiodb.com/api/v1/json/1/searchalbum.php?s=\" + searchTerm\n    // const urlString = \"https://www.theaudiodb.com/api/v1/json/1/discography.php?s=bassnectar\"\n    // const urlString = \"https://www.theaudiodb.com/api/v1/json/1/search.php?s=bassnectar\"\n\n    $.ajax({\n      url: urlString,\n      success: (searchResults) => {\n        \n        // console.log(searchResults)\n\n        const results = searchResults.album\n        var songRows = []\n        results.forEach((album) => {\n          // console.log(album.strAlbum)\n          const songRow = <SongRow key={album.idAlbum} song ={album}/>\n          songRows.push(songRow)\n        })\n\n        this.setState({rows: songRows})\n      },\n      error: (xhr, status, err) => {\n        console.log(\"i failed\")\n      }\n    })\n  }\n\n  handleChange(event) {\n    this.setState({value: event.target.value});\n  }\n\n  handleSubmit(event) {\n    const searchTerm = this.state.value\n    this.performSearch(searchTerm)\n    event.preventDefault();\n  }\n\n  \n\n\n  render() {\n    return (\n      <div className=\"App\">\n        <section className=\"s-hero\">\n        <div className=\"cSearch\">\n          <h1>Search</h1>\n          <form onSubmit={this.handleSubmit}>\n            <label>\n              <input type=\"text\" value={this.state.value} onChange={this.handleChange} />\n            </label>\n            <input type=\"submit\" value=\"Submit\" />\n          </form>\n        </div>\n          {this.state.rows}\n        </section>  \n        \n      </div>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}